import aiosqlite
from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

router = Router()

class FinancesForm(StatesGroup):
    category_1 = State()
    category_2 = State()
    category_3 = State()
    expenses_1 = State()
    expenses_2 = State()
    expenses_3 = State()

@router.message(F.text == "–õ–∏—á–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å—ã")
async def finances(message: Message, state: FSMContext):
    await state.set_state(FinancesForm.category_1)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤:")

@router.message(FinancesForm.category_1)
async def category_1(message: Message, state: FSMContext):
    await state.update_data(category_1=message.text)
    await state.set_state(FinancesForm.expenses_1)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–ª—è –ø–µ—Ä–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")

@router.message(FinancesForm.expenses_1)
async def expenses_1(message: Message, state: FSMContext):
    try:
        expense = float(message.text)
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—É–º–º—ã —Ä–∞—Å—Ö–æ–¥–æ–≤.")
        return

    await state.update_data(expenses_1=expense)
    await state.set_state(FinancesForm.category_2)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤:")

@router.message(FinancesForm.category_2)
async def category_2(message: Message, state: FSMContext):
    await state.update_data(category_2=message.text)
    await state.set_state(FinancesForm.expenses_2)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–ª—è –≤—Ç–æ—Ä–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")

@router.message(FinancesForm.expenses_2)
async def expenses_2(message: Message, state: FSMContext):
    try:
        expense = float(message.text)
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—É–º–º—ã —Ä–∞—Å—Ö–æ–¥–æ–≤.")
        return

    await state.update_data(expenses_2=expense)
    await state.set_state(FinancesForm.category_3)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ—Ç—å—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤:")

@router.message(FinancesForm.category_3)
async def category_3(message: Message, state: FSMContext):
    await state.update_data(category_3=message.text)
    await state.set_state(FinancesForm.expenses_3)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–ª—è —Ç—Ä–µ—Ç—å–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")

@router.message(FinancesForm.expenses_3)
async def expenses_3(message: Message, state: FSMContext):
    try:
        expense = float(message.text)
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—É–º–º—ã —Ä–∞—Å—Ö–æ–¥–æ–≤.")
        return

    data = await state.get_data()
    telegram_id = message.from_user.id

    async with aiosqlite.connect('users.db') as db:
        await db.execute('''
            INSERT INTO finances (telegram_id, category_1, category_2, category_3, expenses_1, expenses_2, expenses_3)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (
            telegram_id, data["category_1"], data["category_2"], data["category_3"],
            data["expenses_1"], data["expenses_2"], expense
        ))
        await db.commit()

    await state.clear()
    await message.answer("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! üéØ")
